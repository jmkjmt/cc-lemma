(
    (data Bool (True False))
    (:: True Bool)
    (:: False Bool)

    (data Nat (Z S))
    (:: Z Nat)
    (:: S (-> (Nat) Nat))
    (:: eq (-> (Nat Nat) Bool))

    (data List (a) (Nil Cons))
    (:: Nil  (List a))
    (:: Cons (-> (a (List a)) (List a)))

    (:: ite (-> (Bool a a) a))
    (let ite (True ?x ?y ) ?x)
    (let ite (False ?x ?y) ?y)

    (let eq (Z      Z     ) True      )
    (let eq (Z      (S ?y)) False     )
    (let eq ((S ?x) Z     ) False     )
    (let eq ((S ?x) (S ?y)) (eq ?x ?y))

    (:: remove-elem-1 (-> (Nat (List Nat)) (List Nat)))
    (let remove-elem-1 (?e Nil) Nil)
    (let remove-elem-1 (?e (Cons ?hd ?tl)) (ite (eq ?e ?hd) (remove-elem-1 ?e ?tl) (Cons ?hd (remove-elem-1 ?e ?tl))))

    (:: solution1 (-> (List Nat) (List Nat)))
    (let solution1 (Nil) Nil)
    (let solution1 ((Cons ?hd ?tl)) (Cons ?hd (remove-elem-1 ?hd (solution1 ?tl))))

    
)