(
    (data Bool (True False))
    (:: True Bool)
    (:: False Bool)

    (data Nat (Z S))
    (:: Z Nat)
    (:: S (-> (Nat) Nat))
    

    (data List (a) (Nil Cons))
    (:: Nil  (List a))
    (:: Cons (-> (a (List a)) (List a)))

    (:: append (-> ((List a) (List a)) (List a)))
    (let append (Nil           ?ys) ?ys                       )
    (let append ((Cons ?x ?xs) ?ys) (Cons ?x (append ?xs ?ys)))

    (:: ite (-> (Bool a a) a))
    (let ite (True ?x ?y ) ?x)
    (let ite (False ?x ?y) ?y)


    (:: eq (-> (Nat Nat) Bool))
    (let eq (Z      Z     ) True      )
    (let eq (Z      (S ?y)) False     )
    (let eq ((S ?x) Z     ) False     )
    (let eq ((S ?x) (S ?y)) (eq ?x ?y))

    (:: remove-elem-1 (-> (Nat (List Nat)) (List Nat)))
    (let remove-elem-1 (?e Nil) Nil)
    (let remove-elem-1 (?e (Cons ?hd ?tl)) (ite (eq ?e ?hd) (remove-elem-1 ?e ?tl) (Cons ?hd (remove-elem-1 ?e ?tl))))

    (:: delete (-> (Nat (List Nat)) (List Nat)))
    (let delete (?n Nil          ) Nil                                                       )
    (let delete (?n (Cons ?x ?xs)) (ite (eq ?n ?x) (delete ?n ?xs) (Cons ?x (delete ?n ?xs))))

    (:: solution1 (-> (List Nat) (List Nat)))
    (let solution1 (Nil) Nil)
    (let solution1 ((Cons ?hd ?tl)) (Cons ?hd (remove-elem-1 ?hd (solution1 ?tl))))

    (:: isin3 (-> ((List Nat) Nat) Bool))
    (let isin3 (Nil ?a) False)
    (let isin3 ((Cons ?hd ?tl) ?a) (ite (eq ?a ?hd) True (isin3 ?tl ?a)))

    (:: unique3 (-> ((List Nat) (List Nat)) (List Nat)))
    (let unique3 (Nil ?lst2) ?lst2)
    (let unique3 ((Cons ?hd ?tl) ?lst2) (ite (isin3 ?lst2 ?hd) (unique3 ?tl ?lst2) (unique3 ?tl (append ?lst2 (Cons ?hd Nil)))))

    (:: solution3 (-> (List Nat) (List Nat)))
    (let solution3 (?lst) (unique3 ?lst Nil))

    (=== test (lst) (List Nat)
        (unique3 lst lst)
        (lst)
    )


)