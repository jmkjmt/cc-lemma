01:01:00 [WARN] Collecting statistics
01:01:00 [WARN]  ex is: zero
01:01:00 [WARN]  ex is: (succ zero)
01:01:00 [WARN]  ex is: (succ (succ zero))
01:01:00 [WARN]  ex is: (V autovar_Nat_0)
01:01:00 [WARN]  ex is: (P autovar_Nat_1 (V autovar_Nat_0))
01:01:00 [WARN]  ex is: (C (V autovar_Nat_0) (V autovar_Nat_0))
01:01:00 [WARN]  ex is: (P autovar_Nat_2 (C (V autovar_Nat_0) (V autovar_Nat_0)))
01:01:00 [WARN]  ex is: (C (C (V autovar_Nat_0) (V autovar_Nat_0)) (C (V autovar_Nat_0) (V autovar_Nat_0)))
01:01:00 [WARN]  ex is: nil
01:01:00 [WARN]  ex is: (cons autovar_Nat_0 nil)
01:01:00 [WARN]  ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
01:01:00 [WARN] Running exploration without proof mode, but goals were given
01:01:00 [WARN] Proof mode: true
01:01:00 [WARN]  ex is: zero
01:01:00 [WARN]  ex is: (succ zero)
01:01:00 [WARN]  ex is: (succ (succ zero))
01:01:00 [WARN]  ex is: (V autovar_Nat_0)
01:01:00 [WARN]  ex is: (P autovar_Nat_1 (V autovar_Nat_0))
01:01:00 [WARN]  ex is: (C (V autovar_Nat_0) (V autovar_Nat_0))
01:01:00 [WARN]  ex is: (P autovar_Nat_2 (C (V autovar_Nat_0) (V autovar_Nat_0)))
01:01:00 [WARN]  ex is: (C (C (V autovar_Nat_0) (V autovar_Nat_0)) (C (V autovar_Nat_0) (V autovar_Nat_0)))
01:01:00 [WARN]  ex is: nil
01:01:00 [WARN]  ex is: (cons autovar_Nat_0 nil)
01:01:00 [WARN]  ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
01:01:00 [WARN] Running exploration without proof mode, but goals were given
01:01:00 [WARN] Proof mode: true
01:01:00 [WARN] proved: (check4 ?ts_ph_Lambda_0 nil) => (ta4 ?ts_ph_Lambda_0)
01:01:00 [WARN] proved: (ta4 ?ts_ph_Lambda_0) => (check4 ?ts_ph_Lambda_0 nil)
01:01:00 [WARN] proved: (append ?ts_ph_Lst_0 nil) => ?ts_ph_Lst_0
01:01:05 [WARN] generalized case_split proof as: (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) -- (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2))
01:01:05 [WARN] proved: (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) => (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2))
01:01:05 [WARN] proved: (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) => (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2)
