(
(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(data Bool (True False))
(:: True Bool)
(:: False Bool)

(:: ite (-> (Bool a a) a))
(let ite (True ?x ?y ) ?x)
(let ite (False ?x ?y) ?y)

(:: add1 (-> (Nat Nat) Nat))
(let add1 (Z ?y) ?y)
(let add1 ((S ?x) ?y) (S (add1 ?x ?y)))

(:: add2 (-> (Nat Nat) Nat))
(let add2 (?n1 Z) ?n1)
(let add2 (?n1 (S ?n)) (S (add2 ?n1 ?n)))

(:: add3 (-> (Nat Nat) Nat))
(let add3 (Z ?n2) ?n2)
(let add3 ((S ?n) ?n2) (add3 ?n (S ?n2)))

(:: add4 (-> (Nat Nat) Nat))
(let add4 (?n1 Z) ?n1)
(let add4 (?n1 (S ?n)) (add4 (S ?n1) ?n))

(:: mul1 (-> (Nat Nat) Nat))
(let mul1 (Z ?n2) Z)
(let mul1 ((S ?n) ?n2) (add1 ?n2 (mul1 ?n ?n2)))

(:: mul2 (-> (Nat Nat) Nat))
(let mul2 (Z ?n2) Z)
(let mul2 ((S ?n) ?n2) (add1 (mul2 ?n ?n2) ?n2))

(:: mul3 (-> (Nat Nat) Nat))
(let mul3 (Z ?n2) Z)
(let mul3 ((S ?n) ?n2) (add3 ?n2 (mul3 ?n ?n2)))

(:: mul4 (-> (Nat Nat) Nat))
(let mul4 (Z ?n2) Z)
(let mul4 ((S ?n) ?n2) (add3 (mul4 ?n ?n2) ?n2))

(:: mul5 (-> (Nat Nat) Nat))
(let mul5 (?n1 Z) Z)
(let mul5 (?n1 (S ?n)) (add2 ?n1 (mul5 ?n1 ?n)))

(:: mul6 (-> (Nat Nat) Nat))
(let mul6 (?n1 Z) Z)
(let mul6 (?n1 (S ?n)) (add4 ?n1 (mul6 ?n1 ?n)))

(:: mul7 (-> (Nat Nat) Nat))
(let mul7 (?n1 Z) Z)
(let mul7 (?n1 (S ?n)) (add1 ?n1 (mul7 ?n1 ?n)))

(:: add-6 (-> (Nat Nat) Nat))
(let add-6 (Z ?y) ?y)
(let add-6 ((S ?x) ?y) (S (add-6 ?y ?x)))
(:: sol6 (-> (Nat Nat) Nat))
(let sol6 (Z ?n2) Z)
(let sol6 ((S ?x) ?n2) (add-6 ?n2 (sol6 ?n2 ?x)))

(//
    sol22 uses integer....
//)

(:: sol32 (-> (Nat Nat) Nat))
(let sol32 (?n1 ?n2) (natmul-sub ?n1 Z ?n2))
(:: natmul-sub (-> (Nat Nat Nat) Nat))
(let natmul-sub (Z ?b ?c) ?b)
(let natmul-sub ((S ?a) ?b ?c) (natmul-sub ?a (add3 ?b ?c) ?c))


(:: sol90 (-> (Nat Nat) Nat))
(let sol90 (?n1 ?n2) (ite (or (eq ?n1 Z) (eq ?n2 Z)) (Z) (innerLoop ?n1 ?n2 ?n2)))
(:: innerLoop (-> (Nat Nat Nat) Nat))
(let innerLoop ((S Z) ?n2 ?maintain) ?n2)
(let innerLoop ((S ?sub) ?n2 ?maintain) (innerLoop ?sub (add1 ?maintain ?n2) ?maintain))
(// sol90 is something wrong... //)

(:: sol116 (-> (Nat Nat) Nat))
(let sol116 (?n1 ?n2) (natmul-helper ?n1 ?n2 Z))
(:: natmul-helper (-> (Nat Nat Nat) Nat))
(let natmul-helper (?n1 Z ?result) ?result)
(let natmul-helper (Z ?n2 ?result) ?result)
(let natmul-helper ((S ?v1) ?n2 ?result) (natmul-helper ?v1 ?n2 (add1 ?result ?n2)))


(//
sol329 , sol353 uses integer
//)
(=== test (n m) (Nat Nat)
    (sol116 n m)
    (sol90 n m)
)

)
