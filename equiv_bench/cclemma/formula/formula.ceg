(
    (data Bool (True False))
    (:: True Bool)
    (:: False Bool)

    (data Nat (Z S))
    (:: Z Nat)
    (:: S (-> (Nat) Nat))

    (let ite (True ?x ?y ) ?x)
    (let ite (False ?x ?y) ?y)
    (// (let ite (?b    ?x ?x) ?x))

    (:: bool-eq (-> (Bool Bool) Bool))
    (let bool-eq (True True) True)
    (let bool-eq (True False) False)
    (let bool-eq (False True) False)
    (let bool-eq (False False) True)


    (:: not (-> (Bool) Bool))
    (let not True False)
    (let not (False) True)

    (:: and (-> (Bool Bool) Bool))
    (let and (False ?y) False)
    (let and (?x False) False)
    (let and (True True) True)

    (:: or (-> (Bool Bool) Bool))
    (let or (True ?y) True)
    (let or (?x True) True)
    (let or (False False) False)

    (:: plus (-> (Nat Nat) Nat))
    (let plus (Z      ?y) ?y             )
    (let plus ((S ?x) ?y) (S (plus ?x ?y)))

    (:: sub (-> (Nat Nat) Nat))
    (let sub (?x Z)          ?x         )
    (let sub (Z ?y)          Z          )
    (let sub ((S ?x) (S ?y)) (sub ?x ?y))

    (data Formula (Truef Falsef Not AndAlso OrElse Imply Equal))
    (:: Truef Formula)
    (:: Falsef Formula)
    (:: Not (-> (Formula) Formula))
    (:: AndAlso (-> (Formula Formula) Formula))
    (:: OrElse (-> (Formula Formula) Formula))
    (:: Imply (-> (Formula Formula) Formula))
    (:: Equal (-> (Exp Exp) Formula))

    (data Exp (Num Plus Minus))
    (:: Num (-> (Nat) Exp))
    (:: Plus (-> (Exp Exp) Exp))
    (:: Minus (-> (Exp Exp) Exp))


    (:: exp-eval (-> (Exp) Nat))
    (let exp-eval ((Num ?n)) ?n)
    (let exp-eval ((Plus ?e1 ?e2)) (plus (exp-eval ?e1) (exp-eval ?e2)))
    (let exp-eval ((Minus ?e1 ?e2)) (sub (exp-eval ?e1) (exp-eval ?e2)))

    (:: ta1 (-> (Formula) Bool))
    (let ta1 (Truef) True)
    (let ta1 (Falsef) False)
    (let ta1 ((Not ?f)) (not (ta1 ?f)))
    (let ta1 ((AndAlso ?f1 ?f2)) (and (ta1 ?f1) (ta1 ?f2)))
    (let ta1 ((OrElse ?f1 ?f2)) (or (ta1 ?f1) (ta1 ?f2)))
    (let ta1 ((Imply ?f1 ?f2)) (or (not (ta1 ?f1)) (ta1 ?f2)))
    (let ta1 ((Equal ?e1 ?e2)) (eq (exp-eval ?e1) (exp-eval ?e2)))

    (:: eval-help (-> (Formula) Formula))
    (let eval-help (Truef) Truef)
    (let eval-help (Falsef) Falsef)
    (let eval-help ((Not Truef)) Falsef)
    (let eval-help ((Not Falsef)) Truef)
    (let eval-help ((Not ?f)) (eval-help (Not (eval-help ?f))))
    (let eval-help ((AndAlso Truef Truef)) Truef)
    (let eval-help ((AndAlso Truef Falsef)) Falsef)
    (let eval-help ((AndAlso Falsef ?f1)) Falsef)
    (let eval-help ((AndAlso ?f1 ?f2)) (eval-help (AndAlso (eval-help ?f1) (eval-help ?f2))))
    (let eval-help ((OrElse Truef ?f1)) Truef)
    (let eval-help ((OrElse Falsef Truef)) Truef)
    (let eval-help ((OrElse Falsef Falsef)) Falsef)
    (let eval-help ((OrElse ?f1 ?f2)) (eval-help (OrElse (eval-help ?f1) (eval-help ?f2))))
    (let eval-help ((Imply Falsef ?f1)) Truef)
    (let eval-help ((Imply Truef Falsef)) Falsef)
    (let eval-help ((Imply Truef Truef)) Truef)
    (let eval-help ((Imply ?f1 ?f2)) (eval-help (Imply (eval-help ?f1) (eval-help ?f2))))
    (let eval-help ((Equal ?e1 ?e2)) (ite (eq (exp-eval ?e1) (exp-eval ?e2)) Truef Falsef))

    (:: convert (-> (Formula) Bool))
    (let convert (Truef) True)
    (let convert (Falsef) False)

    (:: sol441 (-> (Formula) Bool))
    (let sol441 (?f) (ite (convert (eval-help ?f)) (True) (False)))

(//
    (=== test (f) (Formula)
        (ta1 (AndAlso Truef f))
        (and True (ta1 f))
    )
    (=== test2 (b) (Bool)
        (and True b)
        b
    )
    (=== test2 (f) (Formula)
        (and True (ta1 f))
        (ta1 f)
    )
//)
    (=== ta1-sol441 (f) (Formula)
        (sol441 f)
        (ta1 f)
    )

)