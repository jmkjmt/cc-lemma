(datatype Nat () ((S Nat Nat) (Z Nat)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun list_append (Lst Lst) Lst)
(declare-fun list_rev (Lst) Lst)
(declare-fun remove_elem_1 (Nat Lst) Lst)
(declare-fun ta1 (Lst) Lst)

(declare-fun sol20 (Lst) Lst)
(declare-fun aux20 (Lst) Lst)
(declare-fun find (Nat Lst) Bool)
(declare-fun sol43 (Lst) Lst)
(declare-fun aux43 (Nat Nat) Bool)
(declare-fun filter43 ((-> (Nat Nat) Nat) (Nat) Lst) Lst)
(declare-fun sub_aux43 (Lst (-> (Nat Nat) Bool) (Nat) (Lst) ) Lst)

(=> rule0 (list_append nil           ?ys) ?ys                       )
(=> rule1 (list_append (cons ?x ?xs) ?ys) (cons ?x (list_append ?xs ?ys)))

(=> rule2 (list_rev nil          ) nil                             )
(=> rule3 (list_rev (cons ?x ?xs)) (list_append (list_rev ?xs) (cons ?x nil)))


(=> rule4 (remove_elem_1 ?e nil) nil)
(=> rule5 (remove_elem_1 ?e (cons ?hd ?tl)) (ite (= ?e ?hd) (remove_elem_1 ?e ?tl) (cons ?hd (remove_elem_1 ?e ?tl))))


(=> rule6 (ta1 nil) nil)
(=> rule7 (ta1 (cons ?hd ?tl)) (cons ?hd (remove_elem_1 ?hd (ta1 ?tl))))

(=> rule8 (sol43 nil) nil)
(=> rule9 (sol43 (cons ?hd ?tl)) (cons ?hd (sol43 (filter43 aux43 ?hd ?tl))))

(=> rule10 (aux43 ?x ?hd) (not (= ?x ?hd)))
(=> rule11 (filter43 ?f ?a ?l) (sub_aux43 nil ?f ?a ?l))

(=> rule12 (sub_aux43 ?s ?f ?a nil) ?s)
(=> rule13 (sub_aux43 ?s ?f ?a (cons ?hd ?tl)) (ite ($ ?f ?hd ?a) (list_append ?s (cons ?hd (filter43 ?f ?a ?tl))) (list_append ?s (filter43 ?f ?a ?tl))))

(prove (forall ((lst Lst)) (= (ta1 lst) (sol43 lst))))