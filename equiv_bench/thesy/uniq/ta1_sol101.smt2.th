(datatype Nat () ((S Nat Nat) (Z Nat)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun list_append (Lst Lst) Lst)
(declare-fun list_rev (Lst) Lst)
(declare-fun remove_elem_1 (Nat Lst) Lst)
(declare-fun ta1 (Lst) Lst)

(declare-fun sol101 (Lst) Lst)
(declare-fun aux101 (Lst (Nat)) Lst)
(declare-fun has_element (Lst Nat) Bool)
(declare-fun fold_left ((-> (Lst Nat) Bool) (Nat) Lst) Lst)


(=> rule0 (list_append nil           ?ys) ?ys                       )
(=> rule1 (list_append (cons ?x ?xs) ?ys) (cons ?x (list_append ?xs ?ys)))

(=> rule2 (list_rev nil          ) nil                             )
(=> rule3 (list_rev (cons ?x ?xs)) (list_append (list_rev ?xs) (cons ?x nil)))


(=> rule4 (remove_elem_1 ?e nil) nil)
(=> rule5 (remove_elem_1 ?e (cons ?hd ?tl)) (ite (= ?e ?hd) (remove_elem_1 ?e ?tl) (cons ?hd (remove_elem_1 ?e ?tl))))


(=> rule6 (ta1 nil) nil)
(=> rule7 (ta1 (cons ?hd ?tl)) (cons ?hd (remove_elem_1 ?hd (ta1 ?tl))))

(=> rule8 (sol101 ?lst) (fold_left aux101 nil ?lst))
(=> rule9 (aux101 ?a ?x) (ite (has_element ?a ?x) ?a (list_append ?a (cons ?x nil))))
(=> rule10 (has_element nil ?e) false)
(=> rule11 (has_element (cons ?hd ?tl) ?e) (or (= ?hd ?e) (has_element ?tl ?e)))
(=> rule12 (fold_left ?f ?a nil) ?a)
(=> rule13 (fold_left ?f ?a (cons ?h ?t)) (fold_left ?f ($ ?f ?a ?h) ?t))

(prove (forall ((lst Lst)) (= (ta1 lst) (sol101 lst))))

