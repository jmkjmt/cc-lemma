(datatype Nat () ((S Nat Nat) (Z Nat)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun list_append (Lst Lst) Lst)
(declare-fun list_rev (Lst) Lst)
(declare-fun remove_elem_1 (Nat Lst) Lst)
(declare-fun ta1 (Lst) Lst)
(declare-fun drop2 (Lst Nat) Lst)
(declare-fun ta2 (Lst) Nat)

(=> rule0 (list_append nil           ?ys) ?ys                       )
(=> rule1 (list_append (cons ?x ?xs) ?ys) (cons ?x (list_append ?xs ?ys)))

(=> rule2 (list_rev nil          ) nil                             )
(=> rule3 (list_rev (cons ?x ?xs)) (list_append (list_rev ?xs) (cons ?x nil)))


(=> rule4 (remove_elem_1 ?e nil) nil)
(=> rule5 (remove_elem_1 ?e (cons ?hd ?tl)) (ite (= ?e ?hd) (remove_elem_1 ?e ?tl) (cons ?hd (remove_elem_1 ?e ?tl))))


(=> rule6 (ta1 nil) nil)
(=> rule7 (ta1 (cons ?hd ?tl)) (cons ?hd (remove_elem_1 ?hd (ta1 ?tl))))

(=> rule8 (drop2 nil ?n) nil)
(=> rule9 (drop2 (cons ?hd ?tl) ?n) (ite (= ?hd ?n) (drop2 ?tl ?n) (cons ?hd (drop2 ?tl ?n))))

(=> rule10 (ta2 nil) nil)
(=> rule11 (ta2 (cons ?hd ?tl)) (cons ?hd (ta2 (drop2 ?tl ?hd))))

(prove (forall ((lst Lst)) (= (ta1 lst) (ta2 lst))))