(datatype Nat () ((S Nat Nat) (Z Nat)))

(declare-fun add1 (Nat Nat) Nat)
(declare-fun add3 (Nat Nat) Nat)
(declare-fun mul1 (Nat Nat) Nat)
(declare-fun sol32 (Nat Nat) Nat)
(declare-fun natmul-sub (Nat Nat Nat) Nat)

(=> rule1 (add1 Z ?y) ?y)
(=> rule2 (add1 (S ?x) ?y) (S (add1 ?x ?y)))


(=> rule3 (add3 Z ?n2) ?n2)
(=> rule4 (add3 (S ?n) ?n2) (add3 ?n (S ?n2)))


(=> rule5 (mul1 Z ?n2) Z)
(=> rule6 (mul1 (S ?n) ?n2) (add1 ?n2 (mul1 ?n ?n2)))

(=> rule7 (sol32 ?n1 ?n2) (natmul-sub ?n1 Z ?n2))
(=> rule8 (natmul-sub Z ?b ?c) ?b)
(=> rule9 (natmul-sub (S ?a) ?b ?c) (natmul-sub ?a (add3 ?b ?c) ?c))

(prove (forall ((n Nat) (m Nat)) (= (mul1 n m) (sol32 n m))))