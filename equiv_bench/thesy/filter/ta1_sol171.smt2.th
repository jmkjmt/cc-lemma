(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun ta1 ((-> (Nat) Bool) Lst) Lst)
(declare-fun sol171 ((-> (Nat) Bool) Lst) Lst)
(declare-fun aux ((-> (Nat) Bool) Nat Lst) Lst)

(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule2 (ta1 ?pred nil) nil)
(=> rule3 (ta1 ?pred (cons ?hd ?tl)) (ite (?pred hd) (cons ?hd (filter ?pred ?tl)) (filter ?pred ?tl)))
(=> rule4 (sol171 ?pred ?lst) (aux ?pred (S Z) ?lst))
(=> rule5 (aux ?pred ?i nil) (nil))
(=> rule6 (aux ?pred ?i (cons ?h ?t)) (ite (?pred ?h) (cons ?h (aux (S ?i) ?t)) (aux (S ?i) ?t)))
(prove (forall (lst Lst) (= (ta1 lst) (sol171 lst))))