(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun ta1 ((-> (Nat) Bool) Lst) Lst)
(declare-fun sol121 ((-> (Nat) Bool) Lst) Lst)
(declare-fun loop (Lst Lst) Lst)
(declare-fun reverse (Lst Lst) Lst)

(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule2 (ta1 ?pred nil) nil)
(=> rule3 (ta1 ?pred (cons ?hd ?tl)) (ite (?pred hd) (cons ?hd (filter ?pred ?tl)) (filter ?pred ?tl)))
(=> rule4 (sol121 ?pred ?lst) (reverse (loop ?lst nil) nil))
(=> rule5 (reverse nil ?o) ?o)
(=> rule6 (reverse (cons ?hd ?tl) ?o) (reverse ?tl (cons ?hd ?o)))
(=> rule7 (loop nil ?o) ?o)
(=> rule8 (loop (cons ?hd ?tl) ?o) (loop ?tl (ite (?pred ?hd) (cons ?hd ?o) ?o)))
(prove (forall (lst Lst) (= (ta1 lst) (sol121 lst))))