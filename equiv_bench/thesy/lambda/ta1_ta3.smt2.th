(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lambda () ((V Nat Lambda) (P Nat Lambda Lambda) (C Lambda Lambda Lambda)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun check1 (Lambda (Lst)) Bool)
(declare-fun ta1 (Lambda) Bool)
(declare-fun check3 (Lmabda Lst) Bool)
(declare-fun ta3 (Lambda) Bool)

(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))

(=> rule2 (mem ?n nil          ) false                            )
(=> rule3 (mem ?n (cons ?x ?xs)) (ite (= ?n ?x) true (mem ?n ?xs)))

(=> rule4 (check1 (V ?x) ?lst) (mem ?x ?lst))
(=> rule5 (check1 (P ?x ?e) ?lst) (check1 ?e (cons ?x ?lst)))
(=> rule6 (check1 (C ?e1 ?e2) ?lst) (and (check1 ?e1 ?lst) (check1 ?e2 ?lst)))

(=> rule7 (ta1 ?lambda) (check1 ?lambda nil))


(=> rule8 (check3 (P ?st ?k) ?li) (ite (mem ?st ?li) (check3 ?k ?li) (check3 ?k (cons ?st ?li))))
(=> rule9 (check3 (C ?me1 ?me2) ?li) (and (check3 ?me1 ?li) (check3 ?me2 ?li)))
(=> rule10 (check3 (V ?na) ?li) (mem ?na ?li))

(=> rule11 (ta3 ?lambda) (check3 ?lambda nil))

(prove (forall ((l Lambda)) (= (ta1 l) (ta3 l))))