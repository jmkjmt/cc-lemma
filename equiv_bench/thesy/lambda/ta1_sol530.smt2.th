(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lambda () ((V Nat Lambda) (P Nat Lambda Lambda) (C Lambda Lambda Lambda)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun check1 (Lambda (Lst)) Bool)
(declare-fun ta1 (Lambda) Bool)
(declare-fun sol530 (Lambda) Bool)
(declare-fun ck530 (Lambda Lst) Nat)

(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))

(=> rule2 (mem ?n nil          ) false                            )
(=> rule3 (mem ?n (cons ?x ?xs)) (ite (= ?n ?x) true (mem ?n ?xs)))

(=> rule4 (check1 (V ?x) ?lst) (mem ?x ?lst))
(=> rule5 (check1 (P ?x ?e) ?lst) (check1 ?e (cons ?x ?lst)))
(=> rule6 (check1 (C ?e1 ?e2) ?lst) (and (check1 ?e1 ?lst) (check1 ?e2 ?lst)))

(=> rule7 (ta1 ?lambda) (check1 ?lambda nil))

(=> rule8 (sol530 ?m) (= (ck530 ?m nil) Z))
(=> rule9 (ck530 (V ?va) ?lst) (ite (mem ?va ?lst) (z) (s z)))
(=> rule10 (ck530 (C ?ex1 ?ex2) ?lst) (plus (ck530 ?ex1 ?lst) (ck530 ?ex2 ?lst)))
(=> rule11 (ck530 (P ?va ?ex) ?lst) (ck530 ?ex (cons ?va ?lst)))