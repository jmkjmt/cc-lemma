(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lambda () ((V Nat Lambda) (P Nat Lambda Lambda) (C Lambda Lambda Lambda)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun check1 (Lambda (Lst)) Bool)
(declare-fun ta1 (Lambda) Bool)
(declare-fun sol123 (Lambda) Bool)
(declare-fun aux123 (Lambda) Bool)
(declare-fun match123 (Lambda Nat) Bool)
(declare-fun get_right (Lambda) Lambda)
(declare-fun get_left (Lambda) Lambda)
(declare-fun is_connect (Lambda) Bool)
(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))

(=> rule2 (mem ?n nil          ) false                            )
(=> rule3 (mem ?n (cons ?x ?xs)) (ite (= ?n ?x) true (mem ?n ?xs)))

(=> rule4 (check1 (V ?x) ?lst) (mem ?x ?lst))
(=> rule5 (check1 (P ?x ?e) ?lst) (check1 ?e (cons ?x ?lst)))
(=> rule6 (check1 (C ?e1 ?e2) ?lst) (and (check1 ?e1 ?lst) (check1 ?e2 ?lst)))

(=> rule7 (ta1 ?lambda) (check1 ?lambda nil))

(=> rule8 (sol123 ?m) (ite (is_connect ?m) (and (sol123 (get_left ?m)) (sol123 (get_right ?m))) (aux123 ?m)))
(=> rule9 (aux123 (V ?n)) false)
(=> rule10 (aux123 (C ?l ?r)) (and (sol123 ?l) (sol123 ?r)))
(=> rule11 (aux123 (P ?v ?l)) (match123 ?l ?v))
(=> rule12 (match123 (V ?s) ?var) (ite (= ?var ?s) true false))
(=> rule13 (match123 (C ?l1 ?l2) ?var) (and (sol123 (P ?var ?l1)) (sol123 (P ?var ?l2))))
(=> rule14 (match123 (P ?v ?l) ?var) (or (sol123 (P ?var ?l)) (sol123 (P ?v ?l))))
(=> rule15 (get_right (V ?n)) (V ?n))
(=> rule16 (get_right (C ?l1 ?l2)) ?l2)
(=> rule17 (get_right (P ?v ?l)) (P ?v (get_right ?l)))
(=> rule18 (get_left (V ?n)) (V ?n))
(=> rule19 (get_left (C ?l1 ?l2)) ?l1)
(=> rule20 (get_left (P ?v ?l)) (P ?v (get_left ?l)))
(=> rule21 (is_connect (V ?n)) false)
(=> rule22 (is_connect (C ?l1 ?l2)) true)
(=> rule23 (is_connect (P ?v ?l)) (is_connect ?l))