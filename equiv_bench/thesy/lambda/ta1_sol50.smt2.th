(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lambda () ((V Nat Lambda) (P Nat Lambda Lambda) (C Lambda Lambda Lambda)))
(datatype Lst () ((nil Lst) (cons Nat Lst Lst)))

(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun check1 (Lambda (Lst)) Bool)
(declare-fun ta1 (Lambda) Bool)
(declare-fun sol50 (Lambda) Bool)
(declare-fun findStation (Lambda Lambda) Bool)
(declare-fun valify (Nat Lambda) Bool)

(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))

(=> rule2 (mem ?n nil          ) false                            )
(=> rule3 (mem ?n (cons ?x ?xs)) (ite (= ?n ?x) true (mem ?n ?xs)))

(=> rule4 (check1 (V ?x) ?lst) (mem ?x ?lst))
(=> rule5 (check1 (P ?x ?e) ?lst) (check1 ?e (cons ?x ?lst)))
(=> rule6 (check1 (C ?e1 ?e2) ?lst) (and (check1 ?e1 ?lst) (check1 ?e2 ?lst)))

(=> rule7 (ta1 ?lambda) (check1 ?lambda nil))

(=> rule8 (sol50 ?m) (findStation ?m (V Z)))
(=> rule9 (findStation (V ?n) ?covers) (valify ?n ?covers))
(=> rule10 (findStation (P ?n ?m) ?covers) (findStation ?m (P ?n ?covers)))
(=> rule11 (findStation (C ?m1 ?m2) ?covers) (and (findStation ?m1 ?covers) (findStation ?m2 ?covers)))
(=> rule12 (valify (?var V ?n)) false)
(=> rule13 (valify (?var P ?n ?m)) (ite (= ?n ?var) true (valify ?var ?m)))
(=> rule14 (valify (?var C ?m1 ?m2)) false)

(prove (forall ((l Lambda)) (= (ta1 l) (sol50 l))))