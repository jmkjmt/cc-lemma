(
    (data Bool (True False))
    (:: True Bool)
    (:: False Bool)

    (data Nat (Z S))
    (:: Z Nat)
    (:: S (-> (Nat) Nat))

    
    (data Exp (Num Plus Minus))
    (:: Num (-> (Nat) Exp))
    (:: Plus (-> (Exp Exp) Exp))
    (:: Minus (-> (Exp Exp) Exp))

    (data Formula (TTrue FFalse Not AndAlso OrElse Imply Equal))
    (:: TTrue Formula)
    (:: FFalse Formula)
    (:: Not (-> (Formula) Formula))
    (:: AndAlso (-> (Formula) Formula))
    (:: OrElse (-> (Formula) Formula))
    (:: Imply (-> (Formula) Formula))
    (:: Equal (-> (Exp Exp) Formula))

    (:: ite (-> (Bool a a) a))
    (let ite (True ?x ?y ) ?x)
    (let ite (False ?x ?y) ?y)
    (:: not (-> (Bool) Bool))
    (let not True False)
    (let not (False) True)

    (:: and (-> (Bool Bool) Bool))
    (let and (False ?y) False)
    (let and (?x False) False)
    (let and (True True) True)

    (:: or (-> (Bool Bool) Bool))
    (let or (True ?y) True)
    (let or (?x True) True)
    (let or (False False) False)

    (:: plus (-> (Nat Nat) Nat))
    (let plus (Z      ?y) ?y             )
    (let plus ((S ?x) ?y) (S (plus ?x ?y)))

    (:: sub (-> (Nat Nat) Nat))
    (let sub (?x Z)          ?x         )
    (let sub (Z ?y)          Z          )
    (let sub ((S ?x) (S ?y)) (sub ?x ?y))

    (:: eq (-> (Nat Nat) Bool))
    (let eq (Z      Z     ) True      )
    (let eq (Z      (S ?y)) False     )
    (let eq ((S ?x) Z     ) False     )
    (let eq ((S ?x) (S ?y)) (eq ?x ?y))

    (:: expeval (-> (Exp) Nat))
    (let expeval ((Num ?n)) ?n)
    (let expeval ((Plus ?e1 ?e2)) (plus (expeval ?e1) (expeval ?e2)))
    (let expeval ((Minus ?e1 ?e2)) (minus (expeval ?e1) (expeval ?e2)))

    (:: eval (-> (Formula) Nat))
    (let eval ((TTrue)) True)
    

)