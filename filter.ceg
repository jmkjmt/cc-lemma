(
    (data List (a) (Nil Cons))
    (:: Nil  (List a))
    (:: Cons (-> (a (List a)) (List a)))

    (data Bool (True False))
    (:: True Bool)
    (:: False Bool)

    (:: ite (-> (Bool a a) a))
    (let ite (True ?x ?y ) ?x)
    (let ite (False ?x ?y) ?y)

    (data Nat (Z S))
    (:: Z Nat)
    (:: S (-> (Nat) Nat))
    (:: eq (-> (Nat Nat) Bool))
    (let eq (Z      Z     ) True      )
    (let eq (Z      (S ?y)) False     )
    (let eq ((S ?x) Z     ) False     )
    (let eq ((S ?x) (S ?y)) (eq ?x ?y))

    (:: filter (-> ((-> (a) Bool) (List a)) (List a)))
    (let filter (?p Nil          ) Nil                                                     )
    (let filter (?p (Cons ?x ?xs)) (ite ($ ?p ?x) (Cons ?x (filter ?p ?xs)) (filter ?p ?xs)))

    (:: filter2 (-> ((-> (a) Bool) (List a)) (List a)))
    (let filter2 (?p Nil          ) Nil                                                     )
    (let filter2 (?p (Cons ?x ?xs)) (ite ($ ?p ?x) (Cons ?x (filter2 ?p ?xs)) (filter2 ?p ?xs)))

    (:: solution (-> ((-> (Nat) Bool) (List Nat)) (List Nat)))
    (let solution (?p Nil          ) Nil                                                     )
    (let solution (?p (Cons ?x ?xs)) (ite ($ ?p ?x) (Cons ?x (solution ?p ?xs)) (solution ?p ?xs)))


    (:: clone (-> ((-> (Nat) Bool) (List Nat)) (List Nat)))
    (let clone (?pred Nil) Nil)
    (let clone (?pred (Cons ?hd ?tl)) (ite ($ ?pred ?hd) (Cons ?hd (clone ?pred ?tl)) (clone ?pred ?tl)))
(//
    (:: aux (-> (Nat (List Nat) (-> Nat Bool)) (List Nat)))
    (let aux (i Nil pred) Nil)
    (let aux (i (Cons hd tl) pred) (ite (pred hd) (Cons hd (aux ((S i) tl pred))) (aux ((S i) tl pred))))
    
    (:: solution2 (-> ((-> Nat Bool) (List Nat)) (List Nat)))
    (let solutoin2 (pred lst) aux ((S Z) lst pred))
//)
    (=== eq1 (pred lst) ((-> (a) Bool) (List a))
        (clone pred lst)
        (solution pred lst)
    )

)