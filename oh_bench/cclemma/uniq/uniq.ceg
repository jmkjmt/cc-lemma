(
    (data Bool (True False))
    (:: True Bool)
    (:: False Bool)

    (data Nat (Z S))
    (:: Z Nat)
    (:: S (-> (Nat) Nat))
    

    (data List (a) (Nil Cons))
    (:: Nil  (List a))
    (:: Cons (-> (a (List a)) (List a)))

    (:: append (-> ((List a) (List a)) (List a)))
    (let append (Nil           ?ys) ?ys                       )
    (let append ((Cons ?x ?xs) ?ys) (Cons ?x (append ?xs ?ys)))

    (:: ite (-> (Bool a a) a))
    (let ite (True ?x ?y ) ?x)
    (let ite (False ?x ?y) ?y)


    (:: eq (-> (Nat Nat) Bool))
    (let eq (Z      Z     ) True      )
    (let eq (Z      (S ?y)) False     )
    (let eq ((S ?x) Z     ) False     )
    (let eq ((S ?x) (S ?y)) (eq ?x ?y))

    (:: not (-> (Bool) Bool))
    (let not (True) False)
    (let not (False) True)

    (:: remove-elem-1 (-> (Nat (List Nat)) (List Nat)))
    (let remove-elem-1 (?e Nil) Nil)
    (let remove-elem-1 (?e (Cons ?hd ?tl)) (ite (eq ?e ?hd) (remove-elem-1 ?e ?tl) (Cons ?hd (remove-elem-1 ?e ?tl))))

    (:: delete (-> (Nat (List Nat)) (List Nat)))
    (let delete (?n Nil          ) Nil                                                       )
    (let delete (?n (Cons ?x ?xs)) (ite (eq ?n ?x) (delete ?n ?xs) (Cons ?x (delete ?n ?xs))))

    (:: solution1 (-> (List Nat) (List Nat)))
    (let solution1 (Nil) Nil)
    (let solution1 ((Cons ?hd ?tl)) (Cons ?hd (remove-elem-1 ?hd (solution1 ?tl))))

    (:: isin3 (-> ((List Nat) Nat) Bool))
    (let isin3 (Nil ?a) False)
    (let isin3 ((Cons ?hd ?tl) ?a) (ite (eq ?a ?hd) True (isin3 ?tl ?a)))

    (:: unique3 (-> ((List Nat) (List Nat)) (List Nat)))
    (let unique3 (Nil ?lst2) ?lst2)
    (let unique3 ((Cons ?hd ?tl) ?lst2) (ite (isin3 ?lst2 ?hd) (unique3 ?tl ?lst2) (unique3 ?tl (append ?lst2 (Cons ?hd Nil)))))

    (:: solution3 (-> (List Nat) (List Nat)))
    (let solution3 (?lst) (unique3 ?lst Nil))

    (:: isnotin4 (-> ((List Nat) Nat) Bool))
    (let isnotin4 (Nil ?c) True)
    (let isnotin4 ((Cons ?hd ?tl) ?c) (ite (eq ?hd ?c) False (isnotin4 ?tl ?c)))

    (:: uniqsave4 (-> ((List Nat) (List Nat)) List Nat))
    (let uniqsave4 (Nil ?l2) ?l2)
    (let uniqsave4 ((Cons ?hd ?tl) ?l2) (ite (isnotin4 ?l2 ?hd) (uniqsave4 ?tl (append ?l2 (Cons ?hd Nil))) (uniqsave4 ?tl ?l2)))

    (:: solution4 (-> (List Nat) (List Nat)))
    (let solution4 (?lst) (uniqsave4 ?lst Nil))
    
    (=== sol1-sol3 (lst) ((List Nat))
        (solution1 lst)
        (solution3 lst)
    )
    (=== sol1-sol4 (lst) ((List Nat))
        (solution1 lst)
        (solution4 lst)
    )


)