(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))


(data Lambda (V P C))
(:: V (-> (Nat) Lambda))
(:: P (-> (Nat Lambda) Lambda))
(:: C (-> (Lambda Lambda) Lambda))


(data List (a) (Nil Cons))
(:: Nil  (List a))
(:: Cons (-> (a (List a)) (List a)))

(:: ite (-> (Bool a a) a))
(let ite (True ?x ?y ) ?x)
(let ite (False ?x ?y) ?y)

(:: eq (-> (Nat Nat) Bool))
(let eq (Z      Z     ) True      )
(let eq (Z      (S ?y)) False     )
(let eq ((S ?x) Z     ) False     )
(let eq ((S ?x) (S ?y)) (eq ?x ?y))



(:: mem (-> (Nat (List Nat)) Bool))
(let mem (?n Nil          ) False                            )
(let mem (?n (Cons ?x ?xs)) (ite (eq ?n ?x) True (mem ?n ?xs)))

(:: and (-> (Bool Bool) Bool))
(let and (False ?y) False)
(let and (?x False) False)
(let and (True True) True)

(:: or (-> (Bool Bool) Bool))
(let or (True ?y) True)
(let or (?x True) True)
(let or (False False) False)

(:: check1 (-> (Lambda (List Nat)) Bool))
(let check1 ((V ?x) ?lst) (mem ?x ?lst))
(let check1 ((P ?x ?e) ?lst) (check1 ?e (Cons ?x ?lst)))
(let check1 ((C ?e1 ?e2) ?lst) (and (check1 ?e1 ?lst) (check1 ?e2 ?lst)))

(:: solution1 (-> (Lambda) Bool))
(let solution1 (?lambda) (check1 ?lambda Nil))

(:: solution2 (-> (Lambda) Bool))
(let solution2 ((V ?x)) False)
(let solution2 ((P ?x ?e)) (check1 ?e (Cons ?x Nil)))
(let solution2 ((C ?e1 ?e2)) (and (check1 ?e1 Nil) (check1 ?e2 Nil)))

(:: check3 (-> (Lmabda (List Nat)) Bool))
(let check3 ((P ?st ?k) ?li) (ite (mem ?st ?li) (check3 ?k ?li) (check3 ?k (Cons ?st ?li))))
(let check3 ((C ?me1 ?me2) ?li) (and (check3 ?me1 ?li) (check3 ?me2 ?li)))
(let check3 ((V ?na) ?li) (mem ?na ?li))

(:: solution3 (-> (Lambda) Bool))
(let solution3 (?lambda) (check3 ?lambda Nil))

(:: exist (-> ((-> (Nat) Bool) (List Nat)) Bool))
(let exist (?p Nil) False)
(let exist (?p (Cons ?hd ?tl)) (or ($ ?p ?hd) (exist ?p ?tl)))

(:: check4 (-> (Lambda (List Nat)) Bool))
(let check4 ((P ?st ?k) ?li) (check4 ?k (Cons ?st ?li)))
(let check4 ((C ?me1 ?me2) ?li) (and (check4 ?me1 ?li) (check4 ?me2 ?li)))
(let check4 ((V ?na) ?li) (exist (eq ?na) ?li))

(:: solution4 (-> (Lambda) Bool))
(let solution4 ((P ?st ?k)) (check4 ?k (Cons ?st Nil)))
(let solution4 ((C ?me1 ?me2)) (and (check4 ?me1 Nil) (check4 ?me2 Nil)))
(let solution4 ((V ?na)) False)

(=== sol1-sol2 (l) (Lambda)
    (solution1 l)
    (solution2 l)
)
(=== sol1-sol3 (l) (Lambda)
    (solution1 l)
    (solution3 l)
)
(=== sol1-sol4 (l) (Lambda)
    (solution1 l)
    (solution4 l)
)
)