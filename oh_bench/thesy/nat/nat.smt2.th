(datatype Nat () ((succ Nat Nat) (zero Nat)))
(declare-fun add1 (Nat Nat) Nat)
(declare-fun add2 (Nat Nat) Nat)
(declare-fun add3 (Nat Nat) Nat)
(declare-fun add4 (Nat Nat) Nat)
(declare-fun mul1 (Nat Nat) Nat)
(declare-fun mul2 (Nat Nat) Nat)
(declare-fun mul3 (Nat Nat) Nat)
(declare-fun mul4 (Nat Nat) Nat)
(declare-fun mul5 (Nat Nat) Nat)
(declare-fun mul6 (Nat Nat) Nat)
(declare-fun mul7 (Nat Nat) Nat)
(=> rule2 (add1 zero ?n) ?n)
(=> rule3 (add1 (succ ?n) ?m) (succ (add1 ?n ?m)))
(=> rule4 (succ (add1 ?n ?m)) (add1 (succ ?n) ?m))
(=> rule5 (add2 zero ?n1) ?n1)
(=> rule6 (add2 (succ ?n) ?n1) (succ (add2 ?n ?n1)))
(=> rule7 (add3 zero ?n2) ?n2)
(=> rule8 (add3 (succ ?n) ?n2) (add3 ?n (succ ?n2)))
(=> rule9 (add4 zero ?n1) ?n1)
(=> rule10 (add4 (succ ?n) ?n1) (add4 (succ ?n1) ?n))
(=> rule11 (mul1 zero ?n2) zero)
(=> rule12 (mul1 (succ ?n) ?n2) (add2 ?n2 (mul1 ?n ?n2)))
(=> rule13 (mul2 zero ?n2) zero)
(=> rule14 (mul2 (succ ?n) ?n2) (add2 (mul2 ?n ?n2) ?n2))
(=> rule15 (mul3 zero ?n2) zero)
(=> rule16 (mul3 (succ ?n) ?n2) (add3 ?n2 (mul3 ?n ?n2)))
(=> rule17 (mul4 zero ?n2) zero)
(=> rule18 (mul4 (succ ?n) ?n2) (add3 (mul4 ?n ?n2) ?n2))
(=> rule19 (mul5 zero ?n1) zero)
(=> rule20 (mul5 (succ ?n) ?n1) (add2 ?n1 (mul5 ?n1 ?n)))
(=> rule21 (mul6 zero ?n1) zero)
(=> rule22 (mul6 (succ ?n) ?n1) (add4 ?n1 (mul6 ?n1 ?n)))
(=> rule23 (mul7 zero ?n1) zero)
(=> rule24 (mul7 (succ ?n) ?n1) (add1 ?n1 (mul7 ?n1 ?n)))
(prove (forall ((n1 Nat) (n2 Nat)) (= (add1 n1 n2) (add2 n1 n2))))