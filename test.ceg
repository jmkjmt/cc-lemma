(
  (data Nat (Z S))
  (:: Z Nat)
  (:: S (-> (Nat) Nat))

  (:: add1 (-> (Nat Nat) Nat))
  (let add1 (Z ?y) ?y)
  (let add1 ((S ?x) ?y) (S (add1 ?x ?y)))

  (:: add4 (-> (Nat Nat) Nat))
  (let add4 (?n1 Z) ?n1)
  (let add4 (?n1 (S ?n)) (add4 (S ?n1) ?n))

  (:: mul1 (-> (Nat Nat) Nat))
  (let mul1 (Z ?n2) Z)
  (let mul1 ((S ?n) ?n2) (add1 ?n2 (mul1 ?n ?n2)))

  (:: mul2 (-> (Nat Nat) Nat))
  (let mul2 (Z ?n2) Z)
  (let mul2 (?n1 Z) Z)
  (let mul2 ((S Z) ?n2) ?n2)
  (let mul2 ((S ?n) ?n2) (add1 ?n2 (mul2 ?n ?n2)))

  (=== test (n) (Nat)
    (add4 Z n)
    n
  )
)